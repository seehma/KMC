&ACCESS RVP
&REL 57
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM EDITMASK = *
DEF KukaMatlabConnection( )
; =============================================
; 
; Second Testprog to initiate PathCorrection
; from external PC
;
; Type:        KRL Programm for external Connection
; Author:      Matthias Seehauser
;              matthias@seehauser.at
; Institution: MCI - Mechatronics
;              http://www.mci.at
; Date:        01.05.2014
;
; original:    http://www.github.com/seehma
;
; =============================================

;FOLD INI
  ;FOLD BASISTECH INI
    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
    INTERRUPT ON 3 
    BAS (#INITMOV,0 )
  ;ENDFOLD (BASISTECH INI)
  ;FOLD USER INI
    ;Make your modifications here

  ;ENDFOLD (USER INI)
;ENDFOLD (INI)

;---------------------------------------------------------
; initialize communication and set up all RSI objects
;---------------------------------------------------------
HALT         ; Halt the robot at its position
PTP $POS_ACT ; use current position as SAK movement

;---------------------------------------------------------
; Create RSI Object ST_ETHERNET, 
; read object config from .../INIT/KukaRobotInfo_min.xml
;---------------------------------------------------------
err = ST_ETHERNET(hEthernet,0,"KukaRobotInfo_min.xml")
IF (err <> #RSIOK) THEN
  HALT
ENDIF

;---------------------------------------------------------
; Set some Configuration Parameters
;---------------------------------------------------------
; - After "value" to late packages the robot stopps
err = ST_SETPARAM(hEthernet,eERXmaxLatePackages,100) 
; - RSIWARNING if the limit reached
err = ST_SETPARAM(hEthernet,eERXmaxLateInPercent,50) 
; - reset every 'value' statistics. 
;err = ST_SETPARAM(hEthernet,eERXmaxFieldOfView,1000) 
; - eERXFastCycle = FALSE: Time to answer 11ms 
; - eERXFastCycle = TRUE: Fast cycle: answer <2ms necessary!
err = ST_SETPARAM(hEthernet, eERXFastCycle, 0)       
; - $FLAG[1] will be set in case off errors
err = ST_SETPARAM(hEthernet, eERXerrorFlag, 1)      
; - how many decimal places do we wanna have 
err = ST_SETPARAM(hEthernet, eERXprecision, 4)

;---------------------------------------------------------
; initialize Path and axis correction
;---------------------------------------------------------
err=ST_PATHCORR(hPath,0)
err=ST_AXISCORR(hAxis,0)

; ----------------------------------------------------------
; maximum path correction
; ----------------------------------------------------------
err=ST_SETPARAM(hPath,1,-5)  ; range X
err=ST_SETPARAM(hPath,7,380)
err=ST_SETPARAM(hPath,2,-540); range Y
err=ST_SETPARAM(hPath,8,540)
err=ST_SETPARAM(hPath,3,-100); range Z
err=ST_SETPARAM(hPath,9,230)
err=ST_SETPARAM(hPath,4,-90) ; range A
err=ST_SETPARAM(hPath,10,90)
err=ST_SETPARAM(hPath,5,-45) ; range B
err=ST_SETPARAM(hPath,11,45)
err=ST_SETPARAM(hPath,6,-90) ; range C
err=ST_SETPARAM(hPath,12,90)

; ----------------------------------------------------------
; maximum axis correction
; ---------------------------------------------------------
err=ST_SETPARAM(hAxis,2,-10) ; range A1
err=ST_SETPARAM(hAxis,14,10)
err=ST_SETPARAM(hAxis,3,-10) ; range A2
err=ST_SETPARAM(hAxis,15,10)
err=ST_SETPARAM(hAxis,4,-10) ; range A3
err=ST_SETPARAM(hAxis,16,10)
err=ST_SETPARAM(hAxis,5,-10) ; range A4
err=ST_SETPARAM(hAxis,17,10)
err=ST_SETPARAM(hAxis,6,-10) ; range A5
err=ST_SETPARAM(hAxis,18,10)
err=ST_SETPARAM(hAxis,7,-10) ; range A6
err=ST_SETPARAM(hAxis,19,10)

;---------------------------------------------------------
; link path correction to st_ethernet object
;---------------------------------------------------------
err = ST_NEWLINK(hEthernet,1,hPath,1)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,2,hPath,2)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,3,hPath,3)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,4,hPath,4)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,5,hPath,5)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,6,hPath,6)
IF (err <> #RSIOK) THEN
  HALT
ENDIF

;---------------------------------------------------------
; link AKorr to correction on path
;Â´--------------------------------------------------------
err = ST_NEWLINK(hEthernet,7,hAxis,1)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,8,hAxis,2)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,9,hAxis,3)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,10,hAxis,4)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,11,hAxis,5)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK(hEthernet,12,hAxis,6)
IF (err <> #RSIOK) THEN
  HALT
ENDIF

;---------------------------------------------------------
; Start sensor based movement on BASE coordinate system
;---------------------------------------------------------
err = ST_ON1(#BASE,1)      ; BASE coordinate system
;err = ST_ON1(#TCP,1)      ; TCP coordinate system 
;err = ST_ON1(#WORLD,1)    ; WORLD coordinate system
IF (err <> #RSIOK) THEN
  HALT
ENDIF

;---------------------------------------------------------
; Hold on - until RSI-Break reason occur
;---------------------------------------------------------
ST_SKIPSENS() 

;---------------------------------------------------------
; set actual position as active position
;---------------------------------------------------------
PTP $POS_ACT

END